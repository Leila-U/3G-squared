{"version":3,"sources":["components/ContactForm/useForm.js","components/ContactForm/validationRules.js","components/ContactForm/styles.js","components/ContactForm/index.js"],"names":["useForm","validate","useState","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","type","Object","keys","length","notification","message","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","axios","post","then","email","test","ContactContainer","styled","div","Contact","section","FormGroup","form","Span","span","ButtonContainer","Block","lazy","Input","Button","TextArea","withTranslation","title","content","id","t","ValidationType","ErrorMessage","cascade","justify","align","lg","md","sm","padding","autoComplete","onSubmit","placeholder","onChange"],"mappings":"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","file":"static/js/14.29ae212e.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nconst useForm = (validate) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = (type) => {\r\n    notification[type]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n    // Your url for API\r\n    const url = \"\";\r\n    if (Object.keys(values).length === 3) {\r\n      axios\r\n        .post(url, {\r\n          ...values,\r\n        })\r\n        .then(() => {\r\n          setShouldSubmit(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(\"\");\r\n      openNotificationWithIcon(\"success\");\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n\r\nexport default useForm;\r\n","export default function validate(values) {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const ContactContainer = styled.div`\r\n  padding: 5rem 0;\r\n`;\r\n\r\nexport const Contact = styled.section`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 1280px;\r\n`;\r\n\r\nexport const IconContainer = styled.div`\r\n  @media only screen and (min-width: 980px) {\r\n    padding: 10rem 7rem;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled.form`\r\n  width: 100%;\r\n  max-width: 520px;\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled.span`\r\n  display: block;\r\n  font-family: 'Ubuntu', sans-serif;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  text-align: end;\r\n  position: relative;\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { lazy } from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport Zoom from \"react-reveal/Zoom\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nimport useForm from \"./useForm\";\r\nimport validate from \"./validationRules\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\nconst Block = lazy(() => import(\"../Block\"));\r\nconst Input = lazy(() => import(\"../../common/Input\"));\r\nconst Button = lazy(() => import(\"../../common/Button\"));\r\nconst TextArea = lazy(() => import(\"../../common/TextArea\"));\r\n\r\nconst Contact = ({ title, content, id, t }) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }) => {\r\n    const ErrorMessage = errors[type];\r\n    return errors[type] ? (\r\n      <Zoom cascade>\r\n        <S.Span>{ErrorMessage}</S.Span>\r\n      </Zoom>\r\n    ) : (\r\n      <S.Span />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <S.ContactContainer id={id}>\r\n      <S.Contact>\r\n        <Row type=\"flex\" justify=\"space-between\" align=\"middle\">\r\n          <Col lg={12} md={11} sm={24}>\r\n            <Block padding={true} title={title} content={content} />\r\n          </Col>\r\n          <Col lg={12} md={12} sm={24}>\r\n            <S.FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"Name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  id=\"Email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  id=\"Message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <S.ButtonContainer>\r\n                <Button name=\"submit\" type=\"submit\">\r\n                  {t(\"Submit\")}\r\n                </Button>\r\n              </S.ButtonContainer>\r\n            </S.FormGroup>\r\n          </Col>\r\n        </Row>\r\n      </S.Contact>\r\n    </S.ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"sourceRoot":""}